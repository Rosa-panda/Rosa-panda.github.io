1、系统调用简介
用户在 程序中 调用 操作系统 所提供的一些子功能，系统调用在本质上是应用程序请求操作系统核心完成某一特定功能的一种函数调用。
和普通函数调用不同，系统调用运行在处理器的“管态”，而普通函数调用运行在目态。
特别的是，普通的函数调用执行完毕后，将返回调用过程继续执行，而系统调用完成后，系统将对所有要求运行的进程进行优先级分析，优先级高的进程优先执行。

2、系统调用的处理过程（书上没看懂，这里这个每个字居然都认识）
整个过程如下：首先指令流执行到系统调用函数时，系统调用函数通过int 0x80指令进入系统调用入口程序，并且把系统调用号放入%eax中，如果需要传递参数，
则把参数放入%ebx，%ecx和%edx中。进入系统调用入口程序（System_call）后，它首先把相关的寄存器压入内核堆栈（以备将来恢复），这个过程称为保护现场。
保护现场的工作完成后，开始检查系统调用号是不是一个有效值，如果不是则退出。接下来根据系统调用号开始调用系统调用处理程序
（这是一个正式执行系统调用功能的函数），从系统调用处理程序返回后，就会去检查当前进程是否处于就绪态、进程时间片是否用完，如果不在就绪态或者时间片已用完，
那么就会去调用进程调度程序schedule()，转去执行其他进程。如果不执行进程调度程序，那么接下来就会开始执行ret_from_sys_call，
顾名思义，这这个程序主要执行一些系统调用的后处理工作。比如它会去检查当前进程是否有需要处理的信号，如果有则去调用do_signal()，
然后进行一些恢复现场的工作，返回到原先的进程指令流中。至此整个系统调用的过程就结束了。



